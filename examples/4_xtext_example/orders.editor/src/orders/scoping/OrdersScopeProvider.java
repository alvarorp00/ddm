/*
 * generated by Xtext 2.23.0
 */
package orders.scoping;

import java.util.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.*;
import orders.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class OrdersScopeProvider extends AbstractOrdersScopeProvider {

    @Override
    public IScope getScope(EObject context, EReference reference) {
        // if it is the reference to constrain...
        if (context instanceof OrderLine && reference == OrdersPackage.Literals.ORDER_LINE__ITEM) {
            // get root object (Ecommerce)
            Ecommerce ecommerce = (Ecommerce)EcoreUtil2.getRootContainer(context);
            // get items in stock (i.e., with stock > 0)            
            List<Item> items = new ArrayList<>();
            for (Item item : ecommerce.getStock())
            	if (item.getStock() > 0)
            		items.add(item);
            // return items in stock
            return Scopes.scopeFor(items);
        }
        else return super.getScope(context, reference);
    }
    
}
