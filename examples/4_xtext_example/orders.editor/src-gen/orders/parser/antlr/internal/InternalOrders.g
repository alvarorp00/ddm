/*
 * generated by Xtext 2.23.0
 */
grammar InternalOrders;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package orders.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package orders.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import orders.services.OrdersGrammarAccess;

}

@parser::members {

 	private OrdersGrammarAccess grammarAccess;

    public InternalOrdersParser(TokenStream input, OrdersGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ECommerce";
   	}

   	@Override
   	protected OrdersGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleECommerce
entryRuleECommerce returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getECommerceRule()); }
	iv_ruleECommerce=ruleECommerce
	{ $current=$iv_ruleECommerce.current; }
	EOF;

// Rule ECommerce
ruleECommerce returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getECommerceAccess().getEcommerceAction_0(),
					$current);
			}
		)
		otherlv_1='Stock:'
		{
			newLeafNode(otherlv_1, grammarAccess.getECommerceAccess().getStockKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getECommerceAccess().getStockItemParserRuleCall_2_0());
				}
				lv_stock_2_0=ruleItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getECommerceRule());
					}
					add(
						$current,
						"stock",
						lv_stock_2_0,
						"orders.Orders.Item");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='Orders:'
		{
			newLeafNode(otherlv_3, grammarAccess.getECommerceAccess().getOrdersKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getECommerceAccess().getOrdersPurchaseOrderParserRuleCall_4_0());
				}
				lv_orders_4_0=rulePurchaseOrder
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getECommerceRule());
					}
					add(
						$current,
						"orders",
						lv_orders_4_0,
						"orders.Orders.PurchaseOrder");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePurchaseOrder
entryRulePurchaseOrder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPurchaseOrderRule()); }
	iv_rulePurchaseOrder=rulePurchaseOrder
	{ $current=$iv_rulePurchaseOrder.current; }
	EOF;

// Rule PurchaseOrder
rulePurchaseOrder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getPurchaseOrderAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPurchaseOrderAccess().getLinesOrderLineParserRuleCall_1_0());
				}
				lv_lines_1_0=ruleOrderLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPurchaseOrderRule());
					}
					add(
						$current,
						"lines",
						lv_lines_1_0,
						"orders.Orders.OrderLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPurchaseOrderAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPurchaseOrderAccess().getLinesOrderLineParserRuleCall_2_1_0());
					}
					lv_lines_3_0=ruleOrderLine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPurchaseOrderRule());
						}
						add(
							$current,
							"lines",
							lv_lines_3_0,
							"orders.Orders.OrderLine");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPurchaseOrderAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getPurchaseOrderAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPurchaseOrderAccess().getShipToEStringParserRuleCall_5_0());
				}
				lv_shipTo_6_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPurchaseOrderRule());
					}
					set(
						$current,
						"shipTo",
						lv_shipTo_6_0,
						"orders.Orders.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='paying'
		{
			newLeafNode(otherlv_7, grammarAccess.getPurchaseOrderAccess().getPayingKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPurchaseOrderAccess().getBillToEStringParserRuleCall_7_0());
				}
				lv_billTo_8_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPurchaseOrderRule());
					}
					set(
						$current,
						"billTo",
						lv_billTo_8_0,
						"orders.Orders.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	iv_ruleItem=ruleItem
	{ $current=$iv_ruleItem.current; }
	EOF;

// Rule Item
ruleItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getItemAccess().getStockEIntParserRuleCall_0_0());
				}
				lv_stock_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemRule());
					}
					set(
						$current,
						"stock",
						lv_stock_0_0,
						"orders.Orders.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getItemAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"orders.Orders.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getItemAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getItemAccess().getPriceEFloatParserRuleCall_3_0());
				}
				lv_price_3_0=ruleEFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getItemRule());
					}
					set(
						$current,
						"price",
						lv_price_3_0,
						"orders.Orders.EFloat");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='each'
		{
			newLeafNode(otherlv_4, grammarAccess.getItemAccess().getEachKeyword_4());
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getItemAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleOrderLine
entryRuleOrderLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderLineRule()); }
	iv_ruleOrderLine=ruleOrderLine
	{ $current=$iv_ruleOrderLine.current; }
	EOF;

// Rule OrderLine
ruleOrderLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrderLineAccess().getQuantityEIntParserRuleCall_0_0());
				}
				lv_quantity_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrderLineRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_0_0,
						"orders.Orders.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderLineRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getOrderLineAccess().getItemItemCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
