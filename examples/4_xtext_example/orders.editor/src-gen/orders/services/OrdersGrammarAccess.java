/*
 * generated by Xtext 2.23.0
 */
package orders.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OrdersGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ECommerceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.ECommerce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEcommerceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStockItemParserRuleCall_2_0 = (RuleCall)cStockAssignment_2.eContents().get(0);
		private final Keyword cOrdersKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOrdersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOrdersPurchaseOrderParserRuleCall_4_0 = (RuleCall)cOrdersAssignment_4.eContents().get(0);
		
		//ECommerce Ecommerce:
		//	{Ecommerce}
		//	'Stock:' stock+=Item+
		//	'Orders:' orders+=PurchaseOrder+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ecommerce} 'Stock:' stock+=Item+ 'Orders:' orders+=PurchaseOrder+
		public Group getGroup() { return cGroup; }
		
		//{Ecommerce}
		public Action getEcommerceAction_0() { return cEcommerceAction_0; }
		
		//'Stock:'
		public Keyword getStockKeyword_1() { return cStockKeyword_1; }
		
		//stock+=Item+
		public Assignment getStockAssignment_2() { return cStockAssignment_2; }
		
		//Item
		public RuleCall getStockItemParserRuleCall_2_0() { return cStockItemParserRuleCall_2_0; }
		
		//'Orders:'
		public Keyword getOrdersKeyword_3() { return cOrdersKeyword_3; }
		
		//orders+=PurchaseOrder+
		public Assignment getOrdersAssignment_4() { return cOrdersAssignment_4; }
		
		//PurchaseOrder
		public RuleCall getOrdersPurchaseOrderParserRuleCall_4_0() { return cOrdersPurchaseOrderParserRuleCall_4_0; }
	}
	public class PurchaseOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.PurchaseOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesOrderLineParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLinesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLinesOrderLineParserRuleCall_2_1_0 = (RuleCall)cLinesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cShipToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cShipToEStringParserRuleCall_5_0 = (RuleCall)cShipToAssignment_5.eContents().get(0);
		private final Keyword cPayingKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBillToAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBillToEStringParserRuleCall_7_0 = (RuleCall)cBillToAssignment_7.eContents().get(0);
		
		//PurchaseOrder:
		//	'{' lines+=OrderLine ("," lines+=OrderLine)* '}'
		//	'to' shipTo=EString
		//	'paying' billTo=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' lines+=OrderLine ("," lines+=OrderLine)* '}' 'to' shipTo=EString 'paying' billTo=EString
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//lines+=OrderLine
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }
		
		//OrderLine
		public RuleCall getLinesOrderLineParserRuleCall_1_0() { return cLinesOrderLineParserRuleCall_1_0; }
		
		//("," lines+=OrderLine)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//lines+=OrderLine
		public Assignment getLinesAssignment_2_1() { return cLinesAssignment_2_1; }
		
		//OrderLine
		public RuleCall getLinesOrderLineParserRuleCall_2_1_0() { return cLinesOrderLineParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//shipTo=EString
		public Assignment getShipToAssignment_5() { return cShipToAssignment_5; }
		
		//EString
		public RuleCall getShipToEStringParserRuleCall_5_0() { return cShipToEStringParserRuleCall_5_0; }
		
		//'paying'
		public Keyword getPayingKeyword_6() { return cPayingKeyword_6; }
		
		//billTo=EString
		public Assignment getBillToAssignment_7() { return cBillToAssignment_7; }
		
		//EString
		public RuleCall getBillToEStringParserRuleCall_7_0() { return cBillToEStringParserRuleCall_7_0; }
	}
	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.Item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStockEIntParserRuleCall_0_0 = (RuleCall)cStockAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPriceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPriceEFloatParserRuleCall_3_0 = (RuleCall)cPriceAssignment_3.eContents().get(0);
		private final Keyword cEachKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Item:
		//	stock=EInt
		//	name=EString
		//	'(' price=EFloat 'each' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//stock=EInt name=EString '(' price=EFloat 'each' ')'
		public Group getGroup() { return cGroup; }
		
		//stock=EInt
		public Assignment getStockAssignment_0() { return cStockAssignment_0; }
		
		//EInt
		public RuleCall getStockEIntParserRuleCall_0_0() { return cStockEIntParserRuleCall_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//price=EFloat
		public Assignment getPriceAssignment_3() { return cPriceAssignment_3; }
		
		//EFloat
		public RuleCall getPriceEFloatParserRuleCall_3_0() { return cPriceEFloatParserRuleCall_3_0; }
		
		//'each'
		public Keyword getEachKeyword_4() { return cEachKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OrderLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.OrderLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantityEIntParserRuleCall_0_0 = (RuleCall)cQuantityAssignment_0.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemItemCrossReference_1_0 = (CrossReference)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemItemEStringParserRuleCall_1_0_1 = (RuleCall)cItemItemCrossReference_1_0.eContents().get(1);
		
		//OrderLine:
		//	quantity=EInt item=[Item|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//quantity=EInt item=[Item|EString]
		public Group getGroup() { return cGroup; }
		
		//quantity=EInt
		public Assignment getQuantityAssignment_0() { return cQuantityAssignment_0; }
		
		//EInt
		public RuleCall getQuantityEIntParserRuleCall_0_0() { return cQuantityEIntParserRuleCall_0_0; }
		
		//item=[Item|EString]
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }
		
		//[Item|EString]
		public CrossReference getItemItemCrossReference_1_0() { return cItemItemCrossReference_1_0; }
		
		//EString
		public RuleCall getItemItemEStringParserRuleCall_1_0_1() { return cItemItemEStringParserRuleCall_1_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "orders.Orders.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private final ECommerceElements pECommerce;
	private final PurchaseOrderElements pPurchaseOrder;
	private final ItemElements pItem;
	private final OrderLineElements pOrderLine;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OrdersGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pECommerce = new ECommerceElements();
		this.pPurchaseOrder = new PurchaseOrderElements();
		this.pItem = new ItemElements();
		this.pOrderLine = new OrderLineElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("orders.Orders".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ECommerce Ecommerce:
	//	{Ecommerce}
	//	'Stock:' stock+=Item+
	//	'Orders:' orders+=PurchaseOrder+;
	public ECommerceElements getECommerceAccess() {
		return pECommerce;
	}
	
	public ParserRule getECommerceRule() {
		return getECommerceAccess().getRule();
	}
	
	//PurchaseOrder:
	//	'{' lines+=OrderLine ("," lines+=OrderLine)* '}'
	//	'to' shipTo=EString
	//	'paying' billTo=EString;
	public PurchaseOrderElements getPurchaseOrderAccess() {
		return pPurchaseOrder;
	}
	
	public ParserRule getPurchaseOrderRule() {
		return getPurchaseOrderAccess().getRule();
	}
	
	//Item:
	//	stock=EInt
	//	name=EString
	//	'(' price=EFloat 'each' ')';
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}
	
	//OrderLine:
	//	quantity=EInt item=[Item|EString];
	public OrderLineElements getOrderLineAccess() {
		return pOrderLine;
	}
	
	public ParserRule getOrderLineRule() {
		return getOrderLineAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
