/**
 * generated by Xtext 2.23.0
 */
package orders.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import orders.Ecommerce;
import orders.Item;
import orders.OrderLine;
import orders.PurchaseOrder;
import orders.services.OrdersGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class OrdersFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private OrdersGrammarAccess _ordersGrammarAccess;
  
  protected void _format(final Ecommerce ecommerce, @Extension final IFormattableDocument document) {
    EList<Item> _stock = ecommerce.getStock();
    for (final Item item : _stock) {
      document.<Item>format(item);
    }
    EList<PurchaseOrder> _orders = ecommerce.getOrders();
    for (final PurchaseOrder purchaseOrder : _orders) {
      document.<PurchaseOrder>format(purchaseOrder);
    }
  }
  
  protected void _format(final PurchaseOrder purchaseOrder, @Extension final IFormattableDocument document) {
    EList<OrderLine> _lines = purchaseOrder.getLines();
    for (final OrderLine orderLine : _lines) {
      document.<OrderLine>format(orderLine);
    }
  }
  
  public void format(final Object ecommerce, final IFormattableDocument document) {
    if (ecommerce instanceof XtextResource) {
      _format((XtextResource)ecommerce, document);
      return;
    } else if (ecommerce instanceof Ecommerce) {
      _format((Ecommerce)ecommerce, document);
      return;
    } else if (ecommerce instanceof PurchaseOrder) {
      _format((PurchaseOrder)ecommerce, document);
      return;
    } else if (ecommerce instanceof EObject) {
      _format((EObject)ecommerce, document);
      return;
    } else if (ecommerce == null) {
      _format((Void)null, document);
      return;
    } else if (ecommerce != null) {
      _format(ecommerce, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ecommerce, document).toString());
    }
  }
}
