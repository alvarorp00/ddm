/*
 * generated by Xtext 2.28.0
 */
package wizards.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wizards.CheckBox;
import wizards.CloseButton;
import wizards.NavigatorButton;
import wizards.Page;
import wizards.PopUpButton;
import wizards.ReturnButton;
import wizards.TextField;
import wizards.Wizard;
import wizards.WizardsPackage;
import wizards.services.WizardGrammarAccess;

@SuppressWarnings("all")
public class WizardSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WizardGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WizardsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WizardsPackage.CHECK_BOX:
				sequence_CheckBox(context, (CheckBox) semanticObject); 
				return; 
			case WizardsPackage.CLOSE_BUTTON:
				sequence_CloseButton(context, (CloseButton) semanticObject); 
				return; 
			case WizardsPackage.NAVIGATOR_BUTTON:
				sequence_NavigatorButton(context, (NavigatorButton) semanticObject); 
				return; 
			case WizardsPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case WizardsPackage.POP_UP_BUTTON:
				sequence_PopUpButton(context, (PopUpButton) semanticObject); 
				return; 
			case WizardsPackage.RETURN_BUTTON:
				sequence_ReturnButton(context, (ReturnButton) semanticObject); 
				return; 
			case WizardsPackage.TEXT_FIELD:
				sequence_TextField(context, (TextField) semanticObject); 
				return; 
			case WizardsPackage.WIZARD:
				sequence_Wizard(context, (Wizard) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CheckBox returns CheckBox
	 *
	 * Constraint:
	 *     (selected=EBoolean label=EString)
	 * </pre>
	 */
	protected void sequence_CheckBox(ISerializationContext context, CheckBox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.CHECK_BOX__SELECTED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.CHECK_BOX__SELECTED));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckBoxAccess().getSelectedEBooleanParserRuleCall_1_0(), semanticObject.isSelected());
		feeder.accept(grammarAccess.getCheckBoxAccess().getLabelEStringParserRuleCall_2_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CloseButton returns CloseButton
	 *
	 * Constraint:
	 *     (label=EString currentPage=[Page|EString])
	 * </pre>
	 */
	protected void sequence_CloseButton(ISerializationContext context, CloseButton semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCloseButtonAccess().getLabelEStringParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getCloseButtonAccess().getCurrentPagePageEStringParserRuleCall_2_0_1(), semanticObject.eGet(WizardsPackage.Literals.BUTTON__CURRENT_PAGE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NavigatorButton returns NavigatorButton
	 *
	 * Constraint:
	 *     (label=EString currentPage=[Page|EString] dstPage=[Page|EString] alterDstPage=[Page|EString]?)
	 * </pre>
	 */
	protected void sequence_NavigatorButton(ISerializationContext context, NavigatorButton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         checkBox=CheckBox? 
	 *         (textFields+=TextField textFields+=TextField*)? 
	 *         (returnButtons+=ReturnButton returnButtons+=ReturnButton*)? 
	 *         (navigatorButtons+=NavigatorButton navigatorButtons+=NavigatorButton*)? 
	 *         (popUpButtons+=PopUpButton popUpButtons+=PopUpButton*)? 
	 *         (closeButtons+=CloseButton closeButtons+=CloseButton*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PopUpButton returns PopUpButton
	 *
	 * Constraint:
	 *     (label=EString popUp=EString currentPage=[Page|EString])
	 * </pre>
	 */
	protected void sequence_PopUpButton(ISerializationContext context, PopUpButton semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.POP_UP_BUTTON__POP_UP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.POP_UP_BUTTON__POP_UP));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPopUpButtonAccess().getLabelEStringParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getPopUpButtonAccess().getPopUpEStringParserRuleCall_2_0(), semanticObject.getPopUp());
		feeder.accept(grammarAccess.getPopUpButtonAccess().getCurrentPagePageEStringParserRuleCall_3_0_1(), semanticObject.eGet(WizardsPackage.Literals.BUTTON__CURRENT_PAGE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReturnButton returns ReturnButton
	 *
	 * Constraint:
	 *     (label=EString currentPage=[Page|EString] srcPage=[Page|EString])
	 * </pre>
	 */
	protected void sequence_ReturnButton(ISerializationContext context, ReturnButton semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.COMPONENT__LABEL));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.BUTTON__CURRENT_PAGE));
			if (transientValues.isValueTransient(semanticObject, WizardsPackage.Literals.RETURN_BUTTON__SRC_PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardsPackage.Literals.RETURN_BUTTON__SRC_PAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnButtonAccess().getLabelEStringParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getReturnButtonAccess().getCurrentPagePageEStringParserRuleCall_2_0_1(), semanticObject.eGet(WizardsPackage.Literals.BUTTON__CURRENT_PAGE, false));
		feeder.accept(grammarAccess.getReturnButtonAccess().getSrcPagePageEStringParserRuleCall_3_0_1(), semanticObject.eGet(WizardsPackage.Literals.RETURN_BUTTON__SRC_PAGE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextField returns TextField
	 *
	 * Constraint:
	 *     (label=EString min_length=EInt? max_length=EInt?)
	 * </pre>
	 */
	protected void sequence_TextField(ISerializationContext context, TextField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Wizard returns Wizard
	 *
	 * Constraint:
	 *     (title=EString initial_page=[Page|EString] (pages+=Page pages+=Page*)?)
	 * </pre>
	 */
	protected void sequence_Wizard(ISerializationContext context, Wizard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
